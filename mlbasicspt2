import numpy as np
def sigmoid(x):
    #activation function is f(x) = 1/e^x
    return 1 / np.exp(x)

class Neuron:
    def __init__(self, weights, bias):
        self.weights = weights
        self.bias = bias

    def result(self, inputs):
        #this wil weight inputs, add bias, use activation function
        total = np.dot(self.weights, inputs) + self.bias
        return sigmoid(total)

weights = np.array([0,1])
bias = 0
n = Neuron(weights, bias)

x = np.array([2, 3])
print(n.result(x))

class NeuralNetwork:
    #2 inputs, 2 neurons, output layer
    def __init__(self):
        weights = np.array([0, 1])
        bias = 0
        self.h1 = Neuron(weights, bias)
        self.h2 = Neuron(weights, bias)
        self.o1 = Neuron(weights, bias)
    def result(self, x):
        out_h1 = self.h1.result(x)
        out_h2 = self.h2.result(x)
        out_o1 = self.o1.result(np.array([out_h1, out_h2]))
        return out_o1
network = NeuralNetwork()
x = np.array([2, 3])
print(network.result(x))
